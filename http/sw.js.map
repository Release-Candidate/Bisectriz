{"version":3,"sources":["../public/sw.js"],"names":["version","manifest","install","event","activate","keys","key","fetchFromCache","request","cachedResponse","response","return404","err"],"mappings":"AAiBA,MAAM,EAAU,gCAOV,EAAW,m6DAAqB,IAAK,GAAM,GAAkB,EAAE,GAAG,EAWxE,eAAe,GAAU,CAEf,MADQ,MAAM,OAAO,KAAK,CAAO,GAC3B,OAAO,CAAQ,EAEnB,QAAA,IAAI,uCAAuC,CAAO,EAAE,CAChE,CAEA,iBAAiB,UAAY,GAAU,CAC7B,EAAA,UAAU,GAAS,CAC7B,CAAC,EAWD,eAAe,GAAW,CAChB,MAAA,EAAO,MAAM,OAAO,OAC1B,MAAM,QAAQ,IAAI,EAAK,IAAK,GAAQ,IAAQ,GAAW,OAAO,OAAO,CAAG,CAAC,CAAC,EAE1E,QAAQ,IAAI,4BAA4B,CAC5C,CAEA,iBAAiB,WAAa,GAAU,EAAM,UAAU,EAAU,CAAA,CAAC,EAYnE,eAAe,EAAe,EAAS,CACnC,MAAM,EAAiB,MAAM,OAAO,MAAM,EAAS,CAC/C,aAAc,EAAA,CACjB,EACD,GAAI,EAEA,eAAQ,IAAI,+BAA+B,EAAQ,GAAG,EAAE,EACjD,EAGX,QAAQ,IAAI,6BAA6B,EAAQ,GAAG,EAAE,EAEtD,MAAM,EAAW,MAAM,MAAM,CAAO,EAAE,MAAM,CAAS,EACrD,OAAI,EAAS,GACF,GAGX,QAAQ,IAAI,kCAAkC,EAAQ,GAAG,EAAE,EACpD,EAAU,eAAe,EACpC,CAEA,iBAAiB,QAAU,GACvB,EAAM,YAAY,EAAe,EAAM,OAAO,CAAC,CACnD,EAYA,eAAe,EAAU,EAAK,CAElB,eAAA,IAAI,4BAA4B,CAAG,GAAG,EACvC,OAAO,MAAM,WAAW,CACnC","file":"sw.js","sourcesContent":["/*\n * SPDX-FileCopyrightText:  Copyright 2023 Roland Csaszar\n * SPDX-License-Identifier: AGPL-3.0-or-later\n *\n * Project:  Bisectriz\n * File:     sw.js\n * Date:     25.Oct.2023\n *\n * ==============================================================================\n */\n/* eslint-disable function-paren-newline */\n/* eslint-disable implicit-arrow-linebreak */\n\n/**\n * `version` is the name of the cache, including a timestamp.\n * This is filled by `vite` when copying `sw.js` to the directory `http`.\n */\nconst version = \"Bisectriz-\" + __APP_VERSION;\n\n/**\n *  `manifest` is an array holding the paths to all files to cache.\n *  This is changed against the real list of files by the `vite-plugin-pwa`,\n *  configured in `../vite.config.ts`\n */\nconst manifest = VITE_PLUGIN_MANIFEST.map((e) => PWA_SERVER_PATH + e.url);\n\n/*\n * ==============================================================================\n *  Installation\n */\n\n/**\n * Install the service worker.\n * On installation, all files Parcel knows about are added to the cache.\n */\nasync function install() {\n    const cache = await caches.open(version);\n    await cache.addAll(manifest);\n    // eslint-disable-next-line no-console\n    console.log(`[Service Worker] installed files to ${version}`);\n}\n\naddEventListener(\"install\", (event) => {\n    event.waitUntil(install());\n});\n\n/*\n * ==============================================================================\n *  Activation\n */\n\n/**\n * Activate service worker.\n * On activation all files from older versions of the cache are deleted.\n */\nasync function activate() {\n    const keys = await caches.keys();\n    await Promise.all(keys.map((key) => key !== version && caches.delete(key)));\n    // eslint-disable-next-line no-console\n    console.log(`[Service Worker] activated`);\n}\n\naddEventListener(\"activate\", (event) => event.waitUntil(activate()));\n\n/*\n * ==============================================================================\n *  Fetching\n */\n\n/**\n * Fetches the given URL, either from cache or the server.\n * @param {RequestInfo} request The request to fulfill.\n * @returns {Response} The fetched URL as `Response`.\n */\nasync function fetchFromCache(request) {\n    const cachedResponse = await caches.match(request, {\n        ignoreSearch: true,\n    });\n    if (cachedResponse) {\n        // eslint-disable-next-line no-console\n        console.log(`[Service Worker] cache hit: ${request.url}`);\n        return cachedResponse;\n    }\n    // eslint-disable-next-line no-console\n    console.log(`[Service Worker] fetching ${request.url}`);\n\n    const response = await fetch(request).catch(return404);\n    if (response.ok) {\n        return response;\n    }\n    // eslint-disable-next-line no-console\n    console.log(`[Service Worker] haven't found ${request.url}`);\n    return return404(\"URL not found\");\n}\n\naddEventListener(\"fetch\", (event) =>\n    event.respondWith(fetchFromCache(event.request)),\n);\n\n/**\n * ==============================================================================\n *  Return the 404 error page.\n */\n\n/**\n * Return the 404 error page.\n * @param {string} err\n * @returns {Promise<Response | undefined>} The 404 HTML page if cached.\n */\nasync function return404(err) {\n    // eslint-disable-next-line no-console\n    console.log(`[Service Worker] Error: \"${err}\"`);\n    return caches.match(\"/404.html\");\n}\n"]}